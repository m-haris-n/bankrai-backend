// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageRole {
  user
  model
}

// User model
model User {
  id               String            @id @default(uuid())
  email            String            @unique
  fullName         String?
  avatarUrl        String?
  chats            Chat[]
  plaidIntegration PlaidIntegration?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// Chat model
model Chat {
  id         String    @id @default(uuid())
  title      String?   @default("New Chat")
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
}

// Message model
model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([chatId])
}

model PlaidIntegration {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String
  institute_id String
  transactions String?
  accounts     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}
